
npm init -y  //Crea un json con info generica
npm install -D typescript //instala typescript en el proyecto
npm i @types/node --save-dev
npx tsc --init //crea un compilador ts
tsc //para compilar el codigo
npm i --save-dev nodemon //compila cada vez que hay un cambio en js
npm i --save-dev tsx //para compilar y mostrar en consola los archivos ts
npm i --save-dev rimraf //instala la bibioteca que elimina los archivos que no se usan
npm i -D eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser //biblioteca que ayuda a corregir problemas en el codigo (se configura manual)
npm init @eslint/config@latest // instala y configura eslint (mejor opcion)
npm i -D husky //libreria que ayuda a depurar bugs antes de subir a git
postman o insomnia // instalar, se usa para simular los pedidos del frontend
npm i express //ayuda a crear una api
npm i express-validator //libreria que ayuda a la validacion de datos (ex:email)
npm i uuid //instala biblioteca que crea ids unicos
npm i jsonwebtoken // crea tokens
npm install --save @types/jsonwebtoken //instala los tipos para trabajar con los tokens
npm i dotenv //biblioteca para leer variables de environment
npm i http-server //permite crear un servidor
npx http-server //ejecuta el servidor
npm i cors // instala libreria cors
npm i @types/cors --save-dev //instala los tipos para la libreria cors
npm i express-fileupload // instala libreria para manejar archivos de img
npm i --save-dev @types/express-fileupload //instala los tipos
npm i bcrypt //libreria para encriptar password de la BD
npm i --save-dev @types/bcrypt //instala los tipos


============================================
BD comandos Mongo
show databases // muestra la lista de BD's
db.createCollection('users'); // crea una nueva coleccion
show collections // muestra las colecciones
db.users.insertOne({name:"Tania"})  //add a users
db.users.find() //find users
db.users.insertMany([{name: "Julia", age: 20},{name:"Pedro", age:40}, {name: "Olga", age:100}]);
db.users.find({  //find users with age = 30 or 36
    $or: [
        {age:30},
        {age:36}
    ]
});
db.users.find({  //find users with age = 30 and name pedro 
    $and: [
        {age:30},
        {name:"Pedro"}
    ]
});
db.users.find({age: {$gt:20}}) // find users with age>20
db.users.find({age: {$lte:20}}) // find users with age <=20
db.users.find().sort({age:1}) //order by age asc
db.users.find().sort({age:-1}) //order by age desc
db.users.find().limit(3); //only shows the first 3 user
db.users.find().skip(3) // shows users skipping the first 3
db.users.countDocuments() // counts the amount of elements in the collection
db.users.updateOne({name: "Tania"}, {$set: {age: 32}}); //updates the age of Tania

npm install mongoose //libreria para ligar BD al proyecto
npm i @types/mongoose --save-dev //instala los tipos